import numpy as np


table = np.array([[1.0,0,0,0],[0,0,0.5,0]]) # rows are balls (0 = cue, 1 = 1,...), columns are properties of balls (x velocity, y velocity, xpos, ypos)

def collision( n, m):
    table[n,0], table[m,0] = 0.9*table[m,0], 0.9*table[n,0]
    table[n,1], table[m,1] = 0.9*table[m,1], 0.9*table[n,1]
def horizontal_wall(n):
    table[n,1] = -0.9*table[n,1]
def vertical_wall(n):
    table[n,0] = -0.9*table[n,0]

def collision_check(n,m):
    if table[n,2] > table[m,2]:
        right_ball = n
        left_ball = m
    else:
        right_ball = m
        left_ball = n
    if table[right_ball,2]-table[left_ball,2] < 0.01 and table[right_ball,0] < table[left_ball,0]:
        return True
def vertical_wall_check(n):
    if table[n,2] >= 1:
        wall = 1 # Right wall
    elif table[n,2] <= -1:
        wall = -1 # Left wall
    else:
        wall = 0
        
    if wall == 1 and table[n,0] > 0:
        return True
    elif wall == -1 and table[n,0] < 0:
        return True
    else:
        return False


def play(vx,vy):
    dt = 0.01 # interval of time between "frames"
    table[0,0], table[0,1] = vx, vy # Initial velocity of cue ball
    print(table)
    while np.sqrt(np.sum(table[:,0]**2)) > 0.5:
       
        for n in range(2):
            table[n,2] = table[n,2] + (table[n,0]*dt) # xf = x0 + vx*dt
                
        for n in range(2):
            for m in range(2):
                if n!=m and collision_check(n,m): # Collisions between balls
                    collision(n,m)
                    print('Collision between ', n, ' and ', m)
                    print(table)
                if vertical_wall_check(n): # Collisions with vertical walls
                    vertical_wall(n)
                    print(n, ' hit a wall.')
                    print(table)

    
play(1.0,0)
